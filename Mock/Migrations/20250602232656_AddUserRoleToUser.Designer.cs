// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mock;

#nullable disable

namespace Mock.Migrations
{
    [DbContext(typeof(SmartMatchDbContext))]
    [Migration("20250602232656_AddUserRoleToUser")]
    partial class AddUserRoleToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CandidateRequirements", b =>
                {
                    b.Property<int>("ListCandidateCandidateId")
                        .HasColumnType("int");

                    b.Property<int>("ListRequirementRequirementId")
                        .HasColumnType("int");

                    b.HasKey("ListCandidateCandidateId", "ListRequirementRequirementId");

                    b.HasIndex("ListRequirementRequirementId");

                    b.ToTable("CandidateRequirements");
                });

            modelBuilder.Entity("CandidateSkills", b =>
                {
                    b.Property<int>("ListCandidateCandidateId")
                        .HasColumnType("int");

                    b.Property<int>("ListSkillsSkillsId")
                        .HasColumnType("int");

                    b.HasKey("ListCandidateCandidateId", "ListSkillsSkillsId");

                    b.HasIndex("ListSkillsSkillsId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("JobRequirements", b =>
                {
                    b.Property<int>("ListJobJobId")
                        .HasColumnType("int");

                    b.Property<int>("ListRequirementRequirementId")
                        .HasColumnType("int");

                    b.HasKey("ListJobJobId", "ListRequirementRequirementId");

                    b.HasIndex("ListRequirementRequirementId");

                    b.ToTable("JobRequirements");
                });

            modelBuilder.Entity("JobSkills", b =>
                {
                    b.Property<int>("ListJobJobId")
                        .HasColumnType("int");

                    b.Property<int>("ListSkillsSkillsId")
                        .HasColumnType("int");

                    b.HasKey("ListJobJobId", "ListSkillsSkillsId");

                    b.HasIndex("ListSkillsSkillsId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Candidaterole")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevel")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Repository.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevel")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("NumCandidate")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Repository.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Repository.Entities.Requirements", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementId"));

                    b.Property<int>("AdvantageOrMust")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequirementId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Repository.Entities.Skills", b =>
                {
                    b.Property<int>("SkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillsId"));

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillsId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CandidateRequirements", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("ListCandidateCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Requirements", null)
                        .WithMany()
                        .HasForeignKey("ListRequirementRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidateSkills", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("ListCandidateCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Skills", null)
                        .WithMany()
                        .HasForeignKey("ListSkillsSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobRequirements", b =>
                {
                    b.HasOne("Repository.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("ListJobJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Requirements", null)
                        .WithMany()
                        .HasForeignKey("ListRequirementRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSkills", b =>
                {
                    b.HasOne("Repository.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("ListJobJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Skills", null)
                        .WithMany()
                        .HasForeignKey("ListSkillsSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Entities.Job", b =>
                {
                    b.HasOne("Repository.Entities.Manager", "Manager")
                        .WithMany("Jobs")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Repository.Entities.Manager", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
